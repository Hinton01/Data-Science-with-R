##Part one
##Load fuel consumption data mpg data set and variable description
##cty和hwy记录城市和高速公路驾驶耗油量（英里/加仑）
##displ发动机排量，drv驱动系统（f前轮驱动，r后轮驱动，4四轮驱动）
##model车辆型号，共38种车型，class车辆类别（双座汽车，suv，小型汽车等）
library(ggplot2)
mpg

##Ggplot2 consists of three basic components；数据、图形属性映射、几何对象
ggplot（mpg, aes(displ, hwy)）+ geom_point()

##Color, size, shape, and other graphic attributes
aes(displ, hwy, colour = class )
aes(displ, hwy, shape = drv )
aes(displ, hwy, size = cyl)
plot(mpg$displ, mpg$hwy)  #散点图

##ggplot2通过标度将数据（如汽车类别）转换为图形属性（如黄红绿），每一个标度对应着一个属性的映射
ggplot（mpg, aes(displ, cty, colour = class)）+ geom_point()

##给某一图形属性赋固定值而不使用标度,写在aes()函数外侧即可
ggplot（mpg, aes(displ, hwy)）+ geom_point(aes(colour = "blue"))  #区别，上边有坐标指南，而下边颜色符合要求
ggplot（mpg, aes(displ, hwy)）+ geom_point(colour = "blue")
vignette("ggplot2-specs")#查阅颜色及其他图形属性所需的值

##分面，展示分类变量，分割为若干子集，然后创建图形矩阵，再把每一个子集绘制到图形矩阵的窗格中
ggplot（mpg, aes(displ, hwy)）+ geom_point() + facet_wrap(~class)  #封装型

##几何对象，替换geom_point()可以得到其他类型代码
geom_smooth()  #拟合一条平滑曲线，并将曲线和标准误差展示在图中
geom_smooth()  #绘制箱线图，用以概括一系列点的分布情况
geom_histogram()  #和geom_freqpoly()展示连续型变量的分布
geom_bar()  #绘制分类变量的分布情况
geom_path()  #和geom_line()在数据之间绘制连线，折线图只能由左到右或随时间趋势变化，路径图则可以是任意方向

##数据点较多，可添加平滑曲线观察趋势,灰色部分为置信区间来评估不确定性，取消可使用geom_smooth（se = FALSE）
ggplot（mpg, aes(displ, hwy)）+ geom_point() + geom_smooth()

##method="loess"是n较小的默认选项，可查阅帮助？loess，当n超过1000，method=“gam”，需加载mgcv包拟合广义可加模型，调用公式formula=y~s(x)或y~s(x,bs="cs")
library(mgcv)
ggplot（mpg, aes(displ, hwy)）+ geom_point() + geom_smooth(method = "gam", formula = y ~ s(x))

##method="rlm"和lm()类似，但它拟合算法更稳健，对异常值不太敏感，需加载MASS
ggplot（mpg, aes(displ, hwy)）+ geom_point() + geom_smooth(method = "lm")

##曲线的平滑程度由参数span控制，0-1为很不平滑-很平滑
ggplot（mpg, aes(displ, hwy)）+ geom_point() + geom_smooth(span = 0.2)

ggplot(mpg, aes(drv, hwy)) + geom_jitter()  #geom_jitter()扰动点图，在数据中加入一些随机噪声避免图形重叠
ggplot(mpg, aes(drv, hwy)) + geom_boxplot()  #箱线图，用若干统计量概括数据分布的情况
ggplot(mpg, aes(drv, hwy)) + geom_violin()  #简要展示分布“密度”，突出数据分布密集的区域,依赖分布密度计算

##直方图和频数多边图可以展示单个变量的分布,理解密度曲线含义较为困难
ggplot(mpg, aes(hwy)) + geom_histogram()  #展现方式区别，前者条形图，后者使用线性
ggplot(mpg, aes(hwy)) + geom_freqpoly()

##参数binwidth用来调整组距，不需要均匀组距可修改breaks参数
ggplot(mpg, aes(hwy)) + geom_freqpoly(binwidth = 2.5)

##展示不同子集的分布，可以将分类变量映射为填充色或颜色，便于感受各子集分布的区别
ggplot(mpg, aes(displ, colour = drv)) + geom_freqpoly(binwidth = 0.5)
ggplot(mpg, aes(displ, fill = drv)) + geom_histogram(binwidth = 0.5) + facet_wrap(~drv, ncol = 1)

##Drawing a bar chart by geom_bar()
ggplot(mpg, aes(manufacturer)) + geom_bar()
ggplot(drugs, aes(drug, effect)) + geom_bar(stat = "identity")

##时间序列的折线图和路径图
ggplot(economics, aes(date, unemploy/pop)) + geom_line()
ggplot(economics, aes(date, uempmed)) + geom_line()

##将两个时序图绘制在同一张图，将临近时间点的散点连接形成路径图
##前者线条交叉，时间变化方向不明显，后者将年份映射到颜色属性，便于观察
ggplot(economics, aes(unemploy/pop, uempmed)) + geom_path() + geom_point()
year <- functions(x) as.POSIXlt(x)$year + 1900
ggplot(economics, aes(unemploy/pop, uempmed)) + geom_path(colour = "grey50") + geom_point(aes(colour = year(date)))

##修饰坐标轴，xlab()，ylab()设置x轴，y轴标签
ggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1/3)
ggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1/3) +
  xlab("city driving(mpg)") + ylab("highway driving (mpg)")

##NULL省略坐标轴标签
ggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1/3) + xlab(NULL) + ylab(NULL)

##Xlim() and ylim() adjust the display interval of the axis
ggplot(mpg, aes(drv, hwy)) + geom_jitter(width = 0.25)
ggplot(mpg, aes(drv, hwy)) + geom_jitter(width = 0.25) + xlim("f", "r") + ylim(20, 30)

##对于连续性标度，NA可以设置单侧区间界限,区间外去只会默认为NA,na.rm=TRUE关闭警告提示
ggplot(mpg, aes(drv, hwy)) + geom_jitter(width = 0.25， na.rm = TRUE) + ylim(NA, 30)

##Output
p <- ggplot(mpg, aes(displ, hwy, colur = factor(cyl))) + geom_point()
print(p)
ggsave("plot.png", width = 5, height = 5)  #Save png file to hard disk

##View by summary()
summary(p)

##Fast drawing
qplot(displ, hwy, data = mpg)
qplot(displ, data = mpg)

##指定某一图形属性为常量使用I()参数
qplot(displ, hwy, data = mpg, colour = "blue")
qplot(displ, hwy, data = mpg, colour = I("blue")

##Basic graphic type
geom_area()  #绘制面积图
geom_bar(stat = "identity")  #绘制条形图
geom_line()  #绘制折线图
geom_point()  #绘制散点图
geom_polygon()  #绘制多边形
geom_rect()  #绘制矩阵，由xmin,ymin,xmax,ymax定义各顶点坐标参数
geom_tile()  #绘制矩阵，同上但定义中心坐标和尺寸
geom_raster()  #绘制矩阵，当所有瓦片大小相同geom_tile()精简版

##label
df <- data.frame(x = 1, y = 3:1,
                 family = c("sans", "serif", "mono"))  #family设置字体"sans","serif","mono"
ggplot(df, aes(x, y)) + 
  geom_text(aes(label = family, family = family))  

df <- data.frame(x = 1, y = 3:1,
                 face = c("plain", "bold", "italic"))  #fontface设置字体"plain","bold","italic"
ggplot(df, aes(x, y)) + 
  geom_text(aes(label =face, fontface = face)) 

##Change the alignment of the text,size定义大小/angle定义旋转角度
df <- data.frame(x = c(1, 2, 1, 2, 1.5), y = c(1, 1, 2, 2, 1.5),
  text = c("bottom-left", "bottom-right", "top-left","top-right", "center")
  )
ggplot(df, aes(x, y)) + geom_text(aes(label = text))
ggplot(df, aes(x, y)) + geom_text(aes(label = text),
  vjust = "inward", hjust = "inward")

##Multiple groupings with a single graphic attribute
data(Oxboys, package = "nlme")
head(Oxboys)
ggplot(Oxboys, aes(age, height, group = Subject)) +
  geom_point() +geom_line()  #若分组有多个变量，使用interaction合并，aes(group = interaction(school_id,student_id))

##Different groups on different layers
ggplot(Oxboys, aes(age, height)) + 
  geom_line(aes(group = Subject)) +
  geom_smooth(method = "lm", size = 2,se = FALSE)

##Modify the default grouping
ggplot(Oxboys, aes(Occasion, height)) + 
  geom_boxplot()
ggplot(Oxboys, aes(Occasion, height)) + 
  geom_boxplot() + 
  geom_line(aes(group = Subject), colour = "#3366FF",
            alpha = 0.5)  #Draw a curve for each boy

##Match graphic attributes and graphic objects
df <- data.frame(x = 1:3, y = 1:3, colour = c(1,3,5))
ggplot(df, aes(x, y, colour = factor(colour))) +
  geom_line(aes(gtoup = 1), size = 2) + 
  geom_point(size = 5)

ggplot(df, aes(x, y, colour = colour)) +
  geom_line(aes(gtoup = 1), size = 2) + 
  geom_point(size = 5)  #折线图和路径图遵循差一原则

##线性插值法，从一种图形属性平稳转换为另一种属性
xgrid <- with(df, seq(min(x), max(x),length = 50))
interp <- data.frame(x = xgrid, 
                     y = approx(df$x, df$y, xout = xgrid)$y,
                     colour = approx(df$x, df$colour, xout = xgrid)$y)
ggplot(interp, aes(x, y, colour = colour)) + 
  geom_line(size = 2) + geom_point(data = df, size =5)

##当映射对象为离散变量，默认把群组集合对象分解成更小的块和原来未分组前一样形状的图形，但不能用在连续变量上
ggplot(mpg, aes(class)) +
  geom_bar()
ggplot(mpg, aes(class, fill = drv)) + 
  geom_bar()

##展示多重颜色，需要对class设定多重条块
ggplot(mpg, aes(class, fill = hwy)) +
  geom_bar()
ggplot(mpg, aes(class, fill = hwy, group = hwy)) +
  geom_bar()

##曲面图
ggplot(faithfuld, aes(eruptions, waiting)) + 
  geom_contour(aes(z = density, colour = ..level..))
ggplot(faithfuld, aes(eruptions, waiting)) +
  geom_raster(aes(fill = density))

##气泡图，观测点较少
small <- faithfuld[seq(1, nrow(faithfuld), by = 10),]
ggplot(small,aes(eruptions, waiting)) + 
  geom_point(aes(size = density), alpha = 1/3) +
  scale_size_area()

##Draw a map
##矢量边界
mi_counties <- map_data("county", "michigan") %>%
  select(lon = long, lat, group, id = subregion)
head(mi_counties)

##geom_polygon可视化矢量边界数据
ggplot(mi_counties, aes(lon, lat)) + 
  geom_polygon(aes(group =group))+
  coord_quickmap()

ggplot(mi_counties, aes(lon, lat)) + 
  geom_polygon(aes(group =group), fill = NA, colour = "grey50") +
  coord_quickmap()

##点状元数据
mi_cities <- maps::us.cities %>%
  tbl_df() %>%
  filter(country.etc == "MI") %>%
  select(-country.etc, lon = long) %>%
  arrage(desc(pop))
mi_cities

##含权数据
ggplot(midwest, aes(percwhite, percbelowpoverty)) + 
  geom_point()  #未加权
ggplot(midwest, aes(perwhite, percbelowpoverty)) +
  geom_point(aes(size = poptotal/1e6)) +
  scale_size_area("Population\n(millions)",
                  breaks = c(0.5, 1, 2, 4)) #以人口加权
ggplot(midwest, aes(percbelowpoverty)) +
  geom_histogram(binwidth = 1) +
  ylab("Counties")  #人口权重调整直方图

ggplot(midwest, aes(percbelowpoverty)) +
  geom_histogram(aes(weight = popyotal), binwidth = 1) +
  ylab("Population(1000s)")  #人口权重调整密度图

##Display data distribution
ggplot(diamonds, aes(depth)) +
  geom_histogram()
ggplot(diamonds, aes(depth)) +
  geom_histogram(binwidth = 0.1) +
  xlim(55,70)  #Histogram, binwidt定义组距，bins定义组数，breaks定义切分位置

##比较各组数据异同
facet_wrap(~ var)  #绘制多个小直方图
geom_freqpoly()  #绘制频数多边图并以颜色分类
geom_histogram(position = "fill")  #绘制条件密度图

ggplot(diamonds, aes(depth)) + 
  geom_freqpoly(aes(colour = cut), binwidth = 0.1, na,rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")
ggplot(diamonds, aes(depth)) + 
  geom_histogram(aes(colour = cut), binwidth = 0.1, position = "fill",na,rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")  #仅在已知潜在的密度分布平滑、连续且无界使用该密度曲线图

ggplot(diamonds, aes(depth)) + 
  geom_density(na,rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")  #变量density各组频数除以总频数再乘以组距，geom_density()添加正态分布
ggplot(diamonds, aes(depth, fill = cut, colour =cut)) + 
  geom_density(alpha = 0.2, na,rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")

ggplot(diamonds, aes(clarity, depth)) + geom_boxplot()
ggplot(diamonds, aes(carat, depth)) + 
  geom_boxplot(aes(group = cut_width(carat, 0.1))) +
  xlim(NA, 2.05)  #geom_boxplot仅展示五个数据节点和一个异常值，x轴可以是分类、离散变量，连续变量需设置x轴分组方式cut_width()

ggplot(diamonds, aes(clarity, depth)) + geom_violin()
ggplot(diamonds, aes(carat, depth)) + 
  geom_violin(aes(group = cut_width(carat, 0.1))) +
  xlim(NA, 2.05)  #geom_violin小提琴图，箱线图精简版，geom_dotplot()侧重小数据集，精确展示每个点的分布，避免重叠

##小规模数据遮盖绘制问题，可以借助中空点或更小的数据点解决
df <- data.frame(x = rnorm(2000), y = rnorm(2000))
norm <- ggplot(df, aes(x, y)) + xlab(NULL) + ylab(NULL)
norm + geom_point()
norm + geom_point(shape = 1)  #中空点
norm + geom_point(shape = ".")  #像素大小

##大规模数据，改变α参数（透明度），最小透明度1/500
norm + geom_point(alpha = 1 / 3)
norm + geom_point(alpha = 1 / 5)
norm + geom_point(alpha = 1 / 10)

norm + geom_bin2d()
norm + geom_bin2d(bins = 10)  #geom_bin2d直方图的二维推广，正方箱形

library(hexbin)
norm + geom_hex()
norm + geom_hex(bins = 10)  #geom_hex六边形优于正方箱形

ggplot(diamonds, aes(color)) + geom_bar()  #展示每组钻石的数量

ggplot(diamonds, aes(color, price)) + 
  geom_bar(stat = "summary_bin", fun.y = mean)  #展示每组钻石的均价

ggplot(diamonds, aes(table, depth)) +
  geom_bin2d(binwidth = 1, na.rm = TRUE) +
  xlim(50,70) + ylim = (50,70)

ggplot(diamonds, aes(table, depth, z = price)) + 
  geom_raster(binwidth = 1, stat = "summary_2d", fun = mean,
              na.rm = TRUE) + 
  xlim(50, 70) +ylim = (50, 70)

##Part two
##Draw a scatter plot
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) + geom_point()

ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_line() + theme(legend.position = "none")
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
  geom_bar(stat = "identity", position = "identity", fill = NA) +
  theme(legend.position = "none")  #displ定义水平位置，hwy定义竖直位置

ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) + 
  geom_point() + geom_smooth(method = "lm")  #添加回归线

##标度变换,分面、多图层、统计量（图层5个组成部分，数据，图形属性映射，stat_统计变换，geom_几何对象，一种位置调整方式）
ggplot(mpg, aes(displ, hwy)) + geom_point() +
  geom_smooth() + facet_wrap(~year)

p <- ggplot(mpg, aes(displ, hwy))  #图形和图形属性的映射
p
p + geom_point()  #添加图层

#mapping_可用aes()设定参数，NULL默认，data_设为NULL默认省略，geom_几何对象名称，stat统计变化简称，position调整重叠的对象
p + layer(mapping = NULL, data = NULL, geom = "point",
          stat = "identity", position = "identity")  #等价于layer(mapping, data, geom = "point",...)

